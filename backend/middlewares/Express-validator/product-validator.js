import { body } from 'express-validator';

export const productCreatorValidator = [
    body('name')
        .isString().withMessage('Name must be a string')
        .isLength({ min: 3, max: 100 }).withMessage('Name must be between 3 and 100 characters')
        .trim(),

    body('description')
        .isString().withMessage('Description must be a string')
        .isLength({ min: 10 }).withMessage('Description must be at least 10 characters long')
        .trim(),

    body('reviews')
        .optional()
        .isArray().withMessage('Reviews must be an array'),

    body('size')
        .isMongoId().withMessage('Size must be a valid MongoDB ObjectId'),

    body('customSizeOverride')
        .optional()
        .isObject().withMessage('CustomSizeOverride must be an object'),

    body('customSizeOverride.*')
        .optional()
        .isFloat({ gt: 0 }).withMessage('Custom size override values must be positive numbers'),

    body('materials')
        .isArray({ min: 1 }).withMessage('Materials must be a non-empty array'),
    body('materials.*')
        .isMongoId().withMessage('Each material must be a valid MongoDB ObjectId'),

    body('totalElasticity')
        .optional()
        .isFloat({ min: 0, max: 1 }).withMessage('Total elasticity must be between 0 and 1'),

    body('gender')
        .isIn(['woman', 'man']).withMessage('Gender must be either "woman" or "man"'),

    body('stock')
        .isInt({ min: 0 }).withMessage('Stock must be a non-negative integer'),

    body('slug')
        .optional()
        .isEmpty().withMessage('Slug is autogenerated, do not provide it'),

    body('tags')
        .optional()
        .isEmpty().withMessage('Tags are autogenerated, do not provide them'),

    body('color')
        .isString().withMessage('Color must be a string')
        .isLength({ min: 3 }).withMessage('Color must be at least 3 characters long'),

    body('relatedProducts')
        .optional()
        .isEmpty().withMessage('Related products are autogenerated, do not provide them'),
];


export const productUpdateValidator = [
    body('name')
        .optional()
        .isString().withMessage('Name must be a string')
        .isLength({ min: 3, max: 100 }).withMessage('Name must be between 3 and 100 characters')
        .trim(),

    body('description')
        .optional()
        .isString().withMessage('Description must be a string')
        .isLength({ min: 10 }).withMessage('Description must be at least 10 characters long')
        .trim(),

    body('photos')
        .optional()
        .isArray({ min: 1 }).withMessage('Photos must be a non-empty array'),
    body('photos.*')
        .optional()
        .isString().withMessage('Each photo must be a string')
        .notEmpty().withMessage('Photo strings cannot be empty'),

    body('reviews')
        .optional()
        .isArray().withMessage('Reviews must be an array'),

    body('size')
        .optional()
        .isMongoId().withMessage('Size must be a valid MongoDB ObjectId'),

    body('customSizeOverride')
        .optional()
        .isObject().withMessage('CustomSizeOverride must be an object'),
    body('customSizeOverride.*')
        .optional()
        .isFloat({ gt: 0 }).withMessage('Custom size override values must be positive numbers'),

    body('materials')
        .optional()
        .isArray({ min: 1 }).withMessage('Materials must be a non-empty array'),
    body('materials.*')
        .optional()
        .isMongoId().withMessage('Each material must be a valid MongoDB ObjectId'),

    body('totalElasticity')
        .optional()
        .isFloat({ min: 0, max: 1 }).withMessage('Total elasticity must be between 0 and 1'),

    body('gender')
        .optional()
        .isIn(['woman', 'man']).withMessage('Gender must be either "woman" or "man"'),

    body('stock')
        .optional()
        .isInt({ min: 0 }).withMessage('Stock must be a non-negative integer'),

    body('slug')
        .optional()
        .isEmpty().withMessage('Slug is autogenerated, do not provide it'),

    body('tags')
        .optional()
        .isEmpty().withMessage('Tags are autogenerated, do not provide them'),

    body('color')
        .optional()
        .isString().withMessage('Color must be a string')
        .isLength({ min: 3 }).withMessage('Color must be at least 3 characters long'),

    body('relatedProducts')
        .optional()
        .isEmpty().withMessage('Related products are autogenerated, do not provide them'),

];
